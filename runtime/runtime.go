// This Source Code Form is subject to the terms of the Mozilla Public License,
// v. 2.0. If a copy of the MPL was not distributed with this file, You can
// obtain one at http://mozilla.org/MPL/2.0/.

package runtime

import (
	"math"
	"os"
	"regexp"
	"strings"

	"github.com/ta2gch/iris/runtime/env"
	"github.com/ta2gch/iris/runtime/ilos"
	"github.com/ta2gch/iris/runtime/ilos/class"
	"github.com/ta2gch/iris/runtime/ilos/instance"
)

func TopLevelHander(e env.Environment, c ilos.Instance) (ilos.Instance, ilos.Instance) {
	return nil, c
}

var TopLevel = env.NewEnvironment(
	instance.NewStream(os.Stdin, nil),
	instance.NewStream(nil, os.Stdout),
	instance.NewStream(nil, os.Stderr),
	instance.NewFunction(instance.NewSymbol("TOP-LEVEL-HANDLER"), TopLevelHander),
)

func defspecial(name string, function interface{}) {
	name = regexp.MustCompile(`(.)([A-Z])`).ReplaceAllString(name, "$1-$2")
	name = strings.ToUpper(name)
	symbol := instance.NewSymbol(name)
	TopLevel.Special.Define(symbol, instance.NewFunction(func2symbol(function), function))
}

func defun(name string, function interface{}) {
	name = regexp.MustCompile(`(.)([A-Z])`).ReplaceAllString(name, "$1-$2")
	name = strings.ToUpper(name)
	symbol := instance.NewSymbol(name)
	TopLevel.Function.Define(symbol, instance.NewFunction(symbol, function))
}

func defgeneric(name string, function interface{}) {
	name = regexp.MustCompile(`(.)([A-Z])`).ReplaceAllString(name, "$1-$2")
	name = strings.ToUpper(name)
	symbol := instance.NewSymbol(name)
	lambdaList, _ := List(TopLevel, instance.NewSymbol("FIRST"), instance.NewSymbol("&REST"), instance.NewSymbol("REST"))
	generic := instance.NewGenericFunction(symbol, lambdaList, T, class.GenericFunction)
	generic.(*instance.GenericFunction).AddMethod(nil, lambdaList, []ilos.Class{class.StandardClass}, instance.NewFunction(symbol, function))
	TopLevel.Function.Define(symbol, generic)
}

func defglobal(name string, value ilos.Instance) {
	name = regexp.MustCompile(`(.)([A-Z])`).ReplaceAllString(name, "$1-$2")
	name = strings.ToUpper(name)
	symbol := instance.NewSymbol(name)
	TopLevel.Variable.Define(symbol, value)
}

func init() {
	defglobal("*pi*", instance.Float(math.Pi))
	defglobal("*MostPositiveFloat*", MostPositiveFloat)
	defglobal("*MostNegativeFloat*", MostNegativeFloat)
	defun("-", Substruct)
	defun("+", Add)
	defun("*", Multiply)
	defun("<", NumberLessThan)
	defun("<=", NumberLessThanOrEqual)
	defun("=", NumberEqual)
	defun(">", NumberGreaterThan)
	defun(">=", NumberGreaterThanOrEqual)
	defspecial("Quasiquote", Quasiquote)
	defun("Abs", Abs)
	defspecial("And", And)
	defun("Append", Append)
	defun("Apply", Apply)
	defun("ArrayDimensions", ArrayDimensions)
	defun("Aref", Aref)
	defun("Assoc", Assoc)
	// TODO: defspecial2("Assure", Assure)
	defun("Atan", Atan)
	defun("Atan2", Atan2)
	defun("Atanh", Atanh)
	defun("BasicArray*P", BasicArrayStarP)
	defun("BasicArrayP", BasicArrayP)
	defun("BasicVectorP", BasicVectorP)
	defspecial("Block", Block)
	defun("Car", Car)
	defspecial("Case", Case)
	defspecial("CaseUsing", CaseUsing)
	defspecial("Catch", Catch)
	defun("Cdr", Cdr)
	defun("Ceiling", Ceiling)
	defun("Cerror", Cerror)
	defun("CharIndex", CharIndex)
	defun("char/=", CharNotEqual)
	defun("Char<", CharLessThan)
	defun("Char<=", CharLessThanOrEqual)
	defun("Char=", CharEqual)
	defun("Char>", CharGreaterThan)
	defun("Char>=", CharGreaterThanOrEqual)
	defun("Characterp", Characterp)
	defspecial("Class", Class)
	defun("ClassOf", ClassOf)
	defun("Close", Close)
	// TODO defun2("Coercion", Coercion)
	defspecial("Cond", Cond)
	defun("ConditionContinuable", ConditionContinuable)
	defun("Cons", Cons)
	defun("Consp", Consp)
	defun("ContinueCondition", ContinueCondition)
	// TODO defun2("Convert", Convert)
	defun("Cos", Cos)
	defun("Cosh", Cosh)
	defgeneric("Create", Create) //TODO Change to generic function
	defun("CreateArray", CreateArray)
	defun("CreateList", CreateList)
	defun("CreateString", CreateString)
	defun("CreateStringInputStream", CreateStringInputStream)
	defun("CreateStringOutputStream", CreateStringOutputStream)
	defun("CreateVector", CreateVector)
	defspecial("Defclass", Defclass)
	defspecial("Defconstant", Defconstant)
	defspecial("Defdynamic", Defdynamic)
	defspecial("Defgeneric", Defgeneric)
	defspecial("Defmethod", Defmethod)
	defspecial("Defglobal", Defglobal)
	defspecial("Defmacro", Defmacro)
	defspecial("Defun", Defun)
	defun("Div", Div)
	defspecial("Dynamic", Dynamic)
	defspecial("DynamicLet", DynamicLet)
	defun("Elt", Elt)
	defun("Eq", Eq)
	defun("Eql", Eql)
	defun("Equal", Equal)
	defun("Error", Error)
	defun("ErrorOutput", ErrorOutput)
	defun("Exp", Exp)
	defun("Expt", Expt)
	// TODO defun2("FileLength", FileLength)
	// TODO defun2("FilePosition", FilePosition)
	// TODO defun2("FinishOutput", FinishOutput)
	defspecial("Flet", Flet)
	defun("Float", Float)
	defun("Floatp", Floatp)
	defun("Floor", Floor)
	defspecial("For", For)
	defun("Format", Format)
	defun("FormatChar", FormatChar)
	defun("FormatFloat", FormatFloat)
	defun("FormatFreshLine", FormatFreshLine)
	defun("FormatInteger", FormatInteger)
	defun("FormatObject", FormatObject)
	defun("FormatTab", FormatTab)
	defun("Funcall", Funcall)
	defspecial("Function", Function)
	defun("Functionp", Functionp)
	defun("Garef", Garef)
	defun("Gcd", Gcd)
	defun("GeneralArray*P", GeneralArrayStarP)
	defun("GeneralVectorP", GeneralVectorP)
	// TODO defun2("GenericFunctionP", GenericFunctionP)
	defun("Gensym", Gensym)
	// TODO defun2("GetInternalRealTime", GetInternalRealTime)
	// TODO defun2("GetInternalRunTime", GetInternalRunTime)
	defun("GetOutputStreamString", GetOutputStreamString)
	// TODO defun2("GetUniversalTime", GetUniversalTime)
	defspecial("Go", Go)
	// TODO defun2("Identity", Identity)
	defspecial("If", If)
	// TODO defspecial2("IgnoreErrors", IgnoreErrors)
	defgeneric("InitializeObject", InitializeObject) // TODO change generic function
	defun("InputStreamP", InputStreamP)
	defun("Instancep", Instancep)
	// TODO defun2("Integer", Integer)
	defun("Integerp", Integerp)
	// TODO defun2("InternalTimeUnitsPerSecond", InternalTimeUnitsPerSecond)
	defun("Isqrt", Isqrt)
	defspecial("Labels", Labels)
	defspecial("Lambda", Lambda)
	defun("Lcm", Lcm)
	defun("Length", Length)
	defspecial("Let", Let)
	defspecial("Let*", LetStar)
	defun("List", List)
	defun("Listp", Listp)
	defun("Log", Log)
	defun("MapInto", MapInto)
	defun("Mapc", Mapc)
	defun("Mapcan", Mapcan)
	defun("Mapcar", Mapcar)
	defun("Mapcon", Mapcon)
	defun("Mapl", Mapl)
	defun("Maplist", Maplist)
	defun("Max", Max)
	defun("Member", Member)
	defun("Min", Min)
	defun("Mod", Mod)
	defglobal("NIL", Nil)
	defun("Not", Not)
	defun("Nreverse", Nreverse)
	defun("Null", Null)
	defun("Numberp", Numberp)
	defun("OpenInputFile", OpenInputFile)
	defun("OpenIoFile", OpenIoFile)
	defun("OpenOutputFile", OpenOutputFile)
	defun("OpenStreamP", OpenStreamP)
	defspecial("Or", Or)
	defun("OutputStreamP", OutputStreamP)
	defun("ParseNumber", ParseNumber)
	// TODO defun2("PreviewChar", PreviewChar)
	// TODO defun2("ProveFile", ProveFile)
	defspecial("Progn", Progn)
	defun("Property", Property)
	defspecial("Quasiquote", Quasiquote)
	defspecial("Quote", Quote)
	defun("Quotient", Quotient)
	defun("Read", Read)
	// TODO defun2("ReadByte", ReadByte)
	defun("ReadChar", ReadChar)
	defun("ReadLine", ReadLine)
	defun("RemoveProperty", RemoveProperty)
	defun("ReportCondition", ReportCondition)
	defspecial("ReturnFrom", ReturnFrom)
	defun("Reverse", Reverse)
	defun("Round", Round)
	defun("SetAref", SetAref)
	defun("(setf aref)", SetAref)
	defun("SetCar", SetCar)
	defun("(setf car)", SetCar)
	defun("SetCdr", SetCdr)
	defun("(setf cdr)", SetCdr)
	defun("SetDynamic", SetDynamic)
	defun("(setf dynamic)", SetDynamic)
	defun("SetElt", SetElt)
	defun("(setf elt)", SetElt)
	// TODO defun2("SetFilePosition", SetFilePosition)
	defun("SetGaref", SetGaref)
	defun("(setf garef)", SetGaref)
	defun("SetProperty", SetProperty)
	defun("(setf property)", SetProperty)
	defspecial("Setf", Setf)
	defspecial("Setq", Setq)
	defun("SignalCondition", SignalCondition)
	// TODO defun2("SimpleErrorFormatArguments", SimpleErrorFormatArguments)
	// TODO defun2("SimpleErrorFormatString", SimpleErrorFormatString)
	defun("Sin", Sin)
	defun("Sinh", Sinh)
	defun("Sqrt", Sqrt)
	defun("StandardInput", StandardInput)
	defun("StandardOutput", StandardOutput)
	defun("StreamReadyP", StreamReadyP)
	defun("Streamp", Streamp)
	defun("StringAppend", StringAppend)
	defun("StringIndex", StringIndex)
	defun("String/=", StringNotEqual)
	defun("String>", StringGreaterThan)
	defun("String>=", StringGreaterThanOrEqual)
	defun("String=", StringEqual)
	defun("String<", StringLessThan)
	defun("String<=", StringLessThanOrEqual)
	defun("Stringp", Stringp)
	defun("Subclassp", Subclassp)
	defun("Subseq", Subseq)
	defun("Symbolp", Symbolp)
	defglobal("T", T)
	defspecial("Tagbody", Tagbody)
	defspecial("Tan", Tan)
	defspecial("Tanh", Tanh)
	// TODO defspecial2("The", The)
	defspecial("Throw", Throw)
	defun("Truncate", Truncate)
	// TODO defun1("UndefinedEntityName", UndefinedEntityName)
	// TODO defun2("UndefinedEntityNamespace", UndefinedEntityNamespace)
	defspecial("UnwindProtect", UnwindProtect)
	defun("Vector", Vector)
	defspecial("While", While)
	defspecial("WithErrorOutput", WithErrorOutput)
	defspecial("WithHandler", WithHandler)
	defspecial("WithOpenInputFile", WithOpenInputFile)
	defspecial("WithOpenOutputFile", WithOpenOutputFile)
	defspecial("WithStandardInput", WithStandardInput)
	defspecial("WithStandardOutput", WithStandardOutput)
	// TODO defun2("WriteByte", WriteByte)
}
