// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

package runtime

import (
	"math"
	"os"
	"reflect"
	"regexp"
	"runtime"
	"strings"

	"github.com/ta2gch/iris/runtime/env"
	"github.com/ta2gch/iris/runtime/ilos"
	"github.com/ta2gch/iris/runtime/ilos/instance"
)

func func2symbol(function interface{}) ilos.Instance {
	name := runtime.FuncForPC(reflect.ValueOf(function).Pointer()).Name()
	name = regexp.MustCompile(`.*\.`).ReplaceAllString(name, "")
	name = regexp.MustCompile(`(.)([A-Z])`).ReplaceAllString(name, "$1-$2")
	name = strings.ToUpper(name)
	return instance.NewSymbol(name)
}

var TopLevel = env.NewEnvironment(instance.NewStream(os.Stdin, nil), instance.NewStream(nil, os.Stdout), instance.NewStream(nil, os.Stderr), nil)

func defspecial(function interface{}) {
	TopLevel.Special.Define(func2symbol(function), instance.NewFunction(func2symbol(function), function))
}

func defmacro(function interface{}) {
	TopLevel.Macro.Define(func2symbol(function), instance.NewFunction(func2symbol(function), function))
}

func defun(function interface{}) {
	TopLevel.Function.Define(func2symbol(function), instance.NewFunction(func2symbol(function), function))
}

func defun2(name string, function interface{}) {
	symbol := instance.NewSymbol(name)
	TopLevel.Function.Define(symbol, instance.NewFunction(symbol, function))
}
func defglobal(name string, value ilos.Instance) {
	symbol := instance.NewSymbol(name)
	TopLevel.Variable.Define(symbol, value)
}

func New() env.Environment {
	toplevel := env.NewEnvironment(instance.NewStream(os.Stdin, nil), instance.NewStream(nil, os.Stdout), instance.NewStream(nil, os.Stderr), nil)
	defspecial := func(function interface{}) {
		toplevel.Special.Define(func2symbol(function), instance.NewFunction(func2symbol(function), function))
	}
	defspecial2 := func(name string, function interface{}) {
		symbol := instance.NewSymbol(name)
		toplevel.Special.Define(symbol, instance.NewFunction(func2symbol(function), function))
	}
	defun := func(function interface{}) {
		toplevel.Function.Define(func2symbol(function), instance.NewFunction(func2symbol(function), function))
	}
	defun2 := func(name string, function interface{}) {
		symbol := instance.NewSymbol(name)
		toplevel.Function.Define(symbol, instance.NewFunction(symbol, function))
	}
	defglobal := func(name string, value ilos.Instance) {
		symbol := instance.NewSymbol(name)
		toplevel.Variable.Define(symbol, value)
	}
	defglobal("*PI*", instance.Float(math.Pi))
	defglobal("MOST-POSITIVE-FLOAT", MostPositiveFloat)
	defglobal("MOST-NEGATIVE-FLOAT", MostNegativeFloat)
	defun2("-", Substruct)
	defun2("+", Add)
	defun2("*", Multiply)
	defun2("<", NumberLessThan)
	defun2("<=", NumberLessThanOrEqual)
	defun2("=", NumberEqual)
	defun2(">", NumberGreaterThan)
	defun2(">=", NumberGreaterThanOrEqual)
	defspecial(Quasiquote)
	defun(Abs)
	defspecial(And)
	defun(Append)
	defun(Apply)
	defun(Aref)
	defun(Assoc)
	// TODO: defspecial(Assure)
	defun(Atan)
	defun(Atan2)
	defun(Atanh)
	defun2("BASIC-ARRAY*-P", BasicArrayStarP)
	defun(BasicArrayP)
	defun(BasicVectorP)
	defspecial(Block)
	defun(Car)
	defspecial(Case)
	defspecial(CaseUsing)
	defspecial(Catch)
	defun(Cdr)
	defun(Ceiling)
	defun(Cerror)
	defun(CharIndex)
	defun2("char/=", CharNotEqual)
	defun2("Char<", CharLessThan)
	defun2("Char<=", CharLessThanOrEqual)
	defun2("Char=", CharEqual)
	defun2("Char>", CharGreaterThan)
	defun2("Char>=", CharGreaterThanOrEqual)
	defun(Characterp)
	defspecial(Class)
	defun(ClassOf)
	defun(Close)
	// TODO defun(Coercion)
	defspecial(Cond)
	defun(ConditionContinuable)
	defun(Cons)
	defun(Consp)
	defun(ContinueCondition)
	// TODO defun(Convert)
	defun(Cos)
	defun(Cosh)
	defun(Create) //TODO Change to generic function
	defun(CreateArray)
	defun(CreateList)
	defun(CreateString)
	defun(CreateStringInputStream)
	defun(CreateStringOutputStream)
	defun(CreateVector)
	defspecial(Defclass)
	defspecial(Defconstant)
	defspecial(Defdynamic)
	defspecial(Defgeneric)
	defspecial(Defglobal)
	defspecial(Defmacro)
	defspecial(Defun)
	defun(Div)
	defspecial(Dynamic)
	defspecial(DynamicLet)
	defun(Elt)
	defun(Eq)
	defun(Eql)
	defun(Equal)
	defun(Error)
	defun(ErrorOutput)
	defun(Exp)
	defun(Expt)
	// TODO defun(FileLength)
	// TODO defun(FilePosition)
	// TODO defun(FinishOutput)
	defspecial(Flet)
	defun(Float)
	defun(Floatp)
	defun(Floor)
	defspecial(For)
	defun(Format) // TODO full syntax
	// TODO other print function
	defun(Funcall)
	defspecial(Function)
	defun(Functionp)
	defun(Garef)
	defun(Gcd)
	defun2("GENERAL-ARRAY*-P", GeneralArrayStarP)
	defun(GeneralVectorP)
	// TODO defun(GenericFunctionP)
	defun(Gensym)
	// TODO defun(GetInternalRealTime)
	// TODO defun(GetInternalRunTime)
	defun(GetOutputStreamString)
	// TODO defun(GetUniversalTime)
	defspecial(Go)
	// TODO defun(Identity)
	defspecial(If)
	// TODO defspecial(IgnoreErrors)
	defun(InitializeObject) // TODO change generic function
	defun(InputStreamP)
	defun(Instancep)
	// TODO defun(Integer)
	defun(Integerp)
	// TODO defun(InternalTimeUnitsPerSecond)
	defun(Isqrt)
	defspecial(Labels)
	defspecial(Lambda)
	defun(Lcm)
	defun(Length)
	defspecial(Let)
	defspecial2("LET*", LetStar)
	defun(List)
	defun(Listp)
	defun(Log)
	defun(MapInto)
	defun(Mapc)
	defun(Mapcan)
	defun(Mapcar)
	defun(Mapcon)
	defun(Mapl)
	defun(Maplist)
	defun(Max)
	defun(Member)
	defun(Min)
	defun(Mod)
	defglobal("NIL", Nil)
	defun(Not)
	defun(Nreverse)
	defun(Null)
	defun(Numberp)
	defun(OpenInputFile)
	defun(OpenIoFile)
	defun(OpenOutputFile)
	defun(OpenStreamP)
	defspecial(Or)
	defun(OutputStreamP)
	defun(ParseNumber)
	// TODO defun(PreviewChar)
	// TODO defun(ProveFile)
	defspecial(Progn)
	defun(Property)
	defspecial(Quasiquote)
	defspecial(Quote)
	defun(Quotient)
	defun(Read)
	// TODO defun(ReadByte)
	defun(ReadChar)
	defun(ReadLine)
	defun(RemoveProperty)
	defun(ReportCondition)
	defspecial(ReturnFrom)
	defun(Reverse)
	defun(Round)
	defun(SetAref)
	defun2("(SETF AREF)", SetAref)
	defun(SetCar)
	defun2("(SETF CAR)", SetCar)
	defun(SetCdr)
	defun2("(SETF CDR)", SetCdr)
	defun(SetDynamic)
	defun2("(SETF DYNAMIC)", SetDynamic)
	defun(SetElt)
	defun2("(SETF ELT)", SetElt)
	// TODO defun(SetFilePosition)
	defun(SetGaref)
	defun2("(SETF GAREF)", SetGaref)
	defun(SetProperty)
	defun2("(SETF PROPERTY)", SetProperty)
	defun(Setf)
	defun(Setq)
	defun(SignalCondition)
	// TODO defun(SimpleErrorFormatArguments)
	// TODO defun(SimpleErrorFormatString)
	defun(Sin)
	defun(Sinh)
	defun(Sqrt)
	defun(StandardInput)
	defun(StandardOutput)
	defun(StreamReadyP)
	defun(Streamp)
	defun(StringAppend)
	defun(StringIndex)
	defun2("STRING/=", StringNotEqual)
	defun2("STRING<", StringGreaterThan)
	defun2("STRING<=", StringGreaterThan)
	defun2("STRING=", StringEqual)
	defun2("STRIN>", StringGreaterThan)
	defun2("STRING>=", StringGreaterThanOrEqual)
	defun(Stringp)
	defun(Subclassp)
	defun(Subseq)
	defun(Symbolp)
	defglobal("T", T)
	defspecial(Tagbody)
	defspecial(Tan)
	defspecial(Tanh)
	// TODO defspecial(The)
	defspecial(Throw)
	defun(Truncate)
	// TODO defun(UndefinedEntityName)
	// TODO defun(UndefinedEntityNamespace)
	defspecial(UnwindProtect)
	defun(Vector)
	defspecial(While)
	defspecial(WithErrorOutput)
	defspecial(WithHandler)
	defspecial(WithOpenInputFile)
	defspecial(WithOpenOutputFile)
	defspecial(WithStandardInput)
	defspecial(WithStandardOutput)
	// TODO defun(WriteByte)
	return toplevel
}
